// ═══════════════════════════════════════════════════════════════
// InternetFriends Design System - Font Tokens
// Modern SCSS with @use syntax and semantic naming
// ═══════════════════════════════════════════════════════════════

// Font Family Stacks (Next.js optimized)
:root {
  // Primary font families (already optimized via Next.js)
  --font-sans-primary:
    var(--font-geist-sans), -apple-system, BlinkMacSystemFont, "Segoe UI",
    system-ui, sans-serif;
  --font-mono-primary:
    var(--font-geist-mono), "SF Mono", "Monaco", "Inconsolata", "Fira Code",
    "Droid Sans Mono", "Courier New", monospace;

  // Semantic aliases for different use cases
  --font-sans-display: var(--font-sans-primary); // For headlines and large text
  --font-sans-body: var(--font-sans-primary); // For body text and paragraphs
  --font-sans-ui: var(--font-sans-primary); // For UI elements and controls
  --font-mono-code: var(--font-mono-primary); // For code blocks and terminal
  --font-mono-data: var(--font-mono-primary); // For data tables and numbers
}

// Font Weight Scale (semantic naming)
$font-weights: (
  "thin": 100,
  "extra-light": 200,
  "light": 300,
  "regular": 400,
  "medium": 500,
  // Currently used in project
  "semibold": 600,
  "bold": 700,
  "extra-bold": 800,
  "black": 900,
);

// Font Weight CSS Custom Properties
:root {
  --font-weight-thin: #{map-get($font-weights, "thin")};
  --font-weight-light: #{map-get($font-weights, "light")};
  --font-weight-regular: #{map-get($font-weights, "regular")};
  --font-weight-medium: #{map-get($font-weights, "medium")};
  --font-weight-semibold: #{map-get($font-weights, "semibold")};
  --font-weight-bold: #{map-get($font-weights, "bold")};
}

// Font Size Scale (based on modular scale)
$font-sizes: (
  "xs": 0.75rem,
  // 12px
  "sm": 0.875rem,
  // 14px
  "base": 1rem,
  // 16px (browser default)
  "lg": 1.125rem,
  // 18px
  "xl": 1.25rem,
  // 20px
  "2xl": 1.5rem,
  // 24px
  "3xl": 1.875rem,
  // 30px
  "4xl": 2.25rem,
  // 36px
  "5xl": 3rem,
  // 48px
  "6xl": 4rem, // 64px
);

// Font Size CSS Custom Properties
:root {
  --font-size-xs: #{map-get($font-sizes, "xs")};
  --font-size-sm: #{map-get($font-sizes, "sm")};
  --font-size-base: #{map-get($font-sizes, "base")};
  --font-size-lg: #{map-get($font-sizes, "lg")};
  --font-size-xl: #{map-get($font-sizes, "xl")};
  --font-size-2xl: #{map-get($font-sizes, "2xl")};
  --font-size-3xl: #{map-get($font-sizes, "3xl")};
  --font-size-4xl: #{map-get($font-sizes, "4xl")};
  --font-size-5xl: #{map-get($font-sizes, "5xl")};
  --font-size-6xl: #{map-get($font-sizes, "6xl")};
}

// Line Height Scale
$line-heights: (
  "none": 1,
  "tight": 1.25,
  "snug": 1.375,
  "normal": 1.5,
  // Current default
  "relaxed": 1.625,
  "loose": 2,
);

// Line Height CSS Custom Properties
:root {
  --line-height-none: #{map-get($line-heights, "none")};
  --line-height-tight: #{map-get($line-heights, "tight")};
  --line-height-normal: #{map-get($line-heights, "normal")};
  --line-height-relaxed: #{map-get($line-heights, "relaxed")};
}

// Semantic Typography Combinations
:root {
  // Display text (headings, hero text)
  --typography-display-font: var(--font-sans-display);
  --typography-display-weight: var(--font-weight-semibold);
  --typography-display-line-height: var(--line-height-tight);

  // Body text (paragraphs, content)
  --typography-body-font: var(--font-sans-body);
  --typography-body-weight: var(--font-weight-regular);
  --typography-body-line-height: var(--line-height-normal);

  // UI text (buttons, labels, nav)
  --typography-ui-font: var(--font-sans-ui);
  --typography-ui-weight: var(--font-weight-medium);
  --typography-ui-line-height: var(--line-height-none);

  // Code text (code blocks, terminal)
  --typography-code-font: var(--font-mono-code);
  --typography-code-weight: var(--font-weight-regular);
  --typography-code-line-height: var(--line-height-normal);
}

// Utility Functions
@function font-size($key) {
  @return map-get($font-sizes, $key);
}

@function font-weight($key) {
  @return map-get($font-weights, $key);
}

@function line-height($key) {
  @return map-get($line-heights, $key);
}

// Export maps for use in other SCSS files
$fonts: (
  "families": (
    "sans-primary": var(--font-sans-primary),
    "mono-primary": var(--font-mono-primary),
    "sans-display": var(--font-sans-display),
    "sans-body": var(--font-sans-body),
    "sans-ui": var(--font-sans-ui),
    "mono-code": var(--font-mono-code),
  ),
  "weights": $font-weights,
  "sizes": $font-sizes,
  "line-heights": $line-heights,
);
