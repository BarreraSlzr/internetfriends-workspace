{
  "components": [
    {
      "id": "tradingdashboard-organism-organisms-trading-dashboard-organism-tsx",
      "metadata": {
        "id": "tradingdashboard-organism-organisms-trading-dashboard-organism-tsx",
        "name": "TradingDashboard",
        "category": "organism",
        "path": "organisms/trading-dashboard.organism.tsx",
        "filePath": "components/organisms/trading-dashboard.organism.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Trading-Style Development Dashboard",
        "dependencies": [
          "lib/events/horse-race-pipeline",
          "lib/events/pattern-monitor",
          "trading-dashboard.module.scss"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.991Z",
        "size": 9826,
        "exports": [],
        "props": []
      },
      "stateMachine": {
        "componentName": "TradingDashboard",
        "initialState": "isLiveFalse",
        "states": [
          {
            "name": "isLiveFalse",
            "description": "isLive is false",
            "triggers": [
              "setIsLive(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "}",
              "/>",
              "{isLive",
              "?",
              "LIVE",
              "⏸️",
              "Pause"
            ],
            "props": {
              "isLive": false
            }
          },
          {
            "name": "isLiveTrue",
            "description": "isLive is true",
            "triggers": [
              "setIsLive(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "}",
              "/>",
              "{isLive",
              "?",
              "LIVE",
              "⏸️",
              "Pause"
            ],
            "props": {
              "isLive": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsLive(!isLive)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isLiveFalse : isLive is false\n    isLiveTrue : isLive is true\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# TradingDashboard State Machine\n\n## Overview\nTrading-Style Development Dashboard\n\n## Component States\n\n### Logical States\n\n#### isLiveFalse\n- **Description**: isLive is false\n- **Triggers**: setIsLive(false)\n- **CSS Classes**: `} /> {isLive ? LIVE ⏸️ Pause`\n- **Props**: `{\"isLive\":false}`\n\n#### isLiveTrue\n- **Description**: isLive is true\n- **Triggers**: setIsLive(true)\n- **CSS Classes**: `} /> {isLive ? LIVE ⏸️ Pause`\n- **Props**: `{\"isLive\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isLiveFalse : isLive is false\n    isLiveTrue : isLive is true\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<TradingDashboard />\n\n// Loading state\n<TradingDashboard loading />\n\n// Error state\n<TradingDashboard error=\"Something went wrong\" />\n\n// Success state\n<TradingDashboard success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('TradingDashboard States', () => {\n  it('renders default state', () => {\n    render(<TradingDashboard />);\n  });\n  \n  it('renders loading state', () => {\n    render(<TradingDashboard loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<TradingDashboard error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>TradingDashboard State Machine</h1>\n<h2>Overview</h2>\n<p>Trading-Style Development Dashboard</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isLiveFalse</h4>\n<ul>\n<li><strong>Description</strong>: isLive is false</li>\n<li><strong>Triggers</strong>: setIsLive(false)</li>\n<li><strong>CSS Classes</strong>: <code>} /> {isLive ? LIVE ⏸️ Pause</code></li>\n<li><strong>Props</strong>: <code>{\"isLive\":false}</code></li>\n</ul>\n<h4>isLiveTrue</h4>\n<ul>\n<li><strong>Description</strong>: isLive is true</li>\n<li><strong>Triggers</strong>: setIsLive(true)</li>\n<li><strong>CSS Classes</strong>: <code>} /> {isLive ? LIVE ⏸️ Pause</code></li>\n<li><strong>Props</strong>: <code>{\"isLive\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isLiveFalse : isLive is false\n    isLiveTrue : isLive is true\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;TradingDashboard />\n\n// Loading state\n&#x3C;TradingDashboard loading />\n\n// Error state\n&#x3C;TradingDashboard error=\"Something went wrong\" />\n\n// Success state\n&#x3C;TradingDashboard success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('TradingDashboard States', () => {\n  it('renders default state', () => {\n    render(&#x3C;TradingDashboard />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;TradingDashboard loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;TradingDashboard error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:06.946Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 54,
        "fileSize": 9826
      }
    },
    {
      "id": "glasspanel-atomic-glass-glass-panel-atomic-tsx",
      "metadata": {
        "id": "glasspanel-atomic-glass-glass-panel-atomic-tsx",
        "name": "GlassPanel",
        "category": "atomic",
        "path": "glass/glass-panel.atomic.tsx",
        "filePath": "components/glass/glass-panel.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "GlassPanel - Atomic glass morphism component",
        "dependencies": [
          "lib/utils"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T05:53:43.759Z",
        "size": 2101,
        "exports": [
          "GlassDepth",
          "GlassNoise",
          "GlassTint",
          "GlassElevation",
          "GlassPanelProps",
          "GlassPanel",
          "GlassPanelComponentProps"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "GlassPanel",
        "initialState": "idle",
        "states": [
          {
            "name": "idle",
            "description": "Component in default/idle state",
            "triggers": [
              "initial render"
            ],
            "transitions": [],
            "cssClasses": [
              "border",
              "rounded-lg"
            ],
            "props": {}
          },
          {
            "name": "interactive",
            "description": "Component ready for user interaction",
            "triggers": [
              "hover",
              "focus"
            ],
            "transitions": [],
            "cssClasses": [
              "hover:bg-gray-50",
              "focus:border-dashed"
            ],
            "props": {}
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# GlassPanel State Machine\n\n## Overview\nGlassPanel - Atomic glass morphism component\n\n## Component States\n\n### Logical States\n\n#### idle\n- **Description**: Component in default/idle state\n- **Triggers**: initial render\n- **CSS Classes**: `border rounded-lg`\n- **Props**: `{}`\n\n#### interactive\n- **Description**: Component ready for user interaction\n- **Triggers**: hover, focus\n- **CSS Classes**: `hover:bg-gray-50 focus:border-dashed`\n- **Props**: `{}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<GlassPanel />\n\n// Loading state\n<GlassPanel loading />\n\n// Error state\n<GlassPanel error=\"Something went wrong\" />\n\n// Success state\n<GlassPanel success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('GlassPanel States', () => {\n  it('renders default state', () => {\n    render(<GlassPanel />);\n  });\n  \n  it('renders loading state', () => {\n    render(<GlassPanel loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<GlassPanel error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>GlassPanel State Machine</h1>\n<h2>Overview</h2>\n<p>GlassPanel - Atomic glass morphism component</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>idle</h4>\n<ul>\n<li><strong>Description</strong>: Component in default/idle state</li>\n<li><strong>Triggers</strong>: initial render</li>\n<li><strong>CSS Classes</strong>: <code>border rounded-lg</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h4>interactive</h4>\n<ul>\n<li><strong>Description</strong>: Component ready for user interaction</li>\n<li><strong>Triggers</strong>: hover, focus</li>\n<li><strong>CSS Classes</strong>: <code>hover:bg-gray-50 focus:border-dashed</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;GlassPanel />\n\n// Loading state\n&#x3C;GlassPanel loading />\n\n// Error state\n&#x3C;GlassPanel error=\"Something went wrong\" />\n\n// Success state\n&#x3C;GlassPanel success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('GlassPanel States', () => {\n  it('renders default state', () => {\n    render(&#x3C;GlassPanel />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;GlassPanel loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;GlassPanel error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:06.962Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 16,
        "fileSize": 2101
      }
    },
    {
      "id": "headerorganism-organism-organisms-header-header-organism-tsx",
      "metadata": {
        "id": "headerorganism-organism-organisms-header-header-organism-tsx",
        "name": "HeaderOrganism",
        "category": "organism",
        "path": "organisms/header/header.organism.tsx",
        "filePath": "components/organisms/header/header.organism.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Header context",
        "dependencies": [
          "lib/utils",
          "components/atomic/button",
          "components/molecular/navigation",
          "hooks/use-theme",
          "hooks/use-header-orbit",
          "i18n",
          "i18n/config",
          "types",
          "header.organism.module.scss"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T05:12:01.046Z",
        "size": 17262,
        "exports": [
          "useHeader",
          "HeaderOrganism"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "HeaderOrganism",
        "initialState": "isOpenFalse",
        "states": [
          {
            "name": "isOpenFalse",
            "description": "isOpen is false",
            "triggers": [
              "setIsOpen(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "rotate-180"
            ],
            "props": {
              "isOpen": false
            }
          },
          {
            "name": "isOpenTrue",
            "description": "isOpen is true",
            "triggers": [
              "setIsOpen(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "rotate-180"
            ],
            "props": {
              "isOpen": true
            }
          },
          {
            "name": "isOpenFalse",
            "description": "isOpen is false",
            "triggers": [
              "setIsOpen(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "rotate-180"
            ],
            "props": {
              "isOpen": false
            }
          },
          {
            "name": "isOpenTrue",
            "description": "isOpen is true",
            "triggers": [
              "setIsOpen(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "rotate-180"
            ],
            "props": {
              "isOpen": true
            }
          },
          {
            "name": "isVisibleFalse",
            "description": "isVisible is false",
            "triggers": [
              "setIsVisible(false)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isVisible": false
            }
          },
          {
            "name": "isVisibleTrue",
            "description": "isVisible is true",
            "triggers": [
              "setIsVisible(true)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isVisible": true
            }
          },
          {
            "name": "loading",
            "description": "Component is in loading state",
            "triggers": [
              "async action started"
            ],
            "transitions": [],
            "cssClasses": [
              "animate-pulse",
              "opacity-50",
              "cursor-not-allowed"
            ],
            "props": {
              "loading": true
            }
          },
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          },
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          },
          {
            "name": "success",
            "description": "Component is in success state",
            "triggers": [
              "operation completed"
            ],
            "transitions": [],
            "cssClasses": [
              "border-green-500",
              "text-green-600",
              "bg-green-50"
            ],
            "props": {
              "success": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(!isOpen)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setTheme(option.value)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(!isOpen)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setLocale(lang.code as \"fr\" | \"en\" | \"es\")"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsOpen(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsVisible(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "textValue",
            "effect": "setHeaderState((prev)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isVisibleFalse : isVisible is false\n    isVisibleTrue : isVisible is true\n    loading : Component is in loading state\n    disabled : Component is disabled\n    error : Component has error state\n    success : Component is in success state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : textValue\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# HeaderOrganism State Machine\n\n## Overview\nHeader context\n\n## Component States\n\n### Logical States\n\n#### isOpenFalse\n- **Description**: isOpen is false\n- **Triggers**: setIsOpen(false)\n- **CSS Classes**: `rotate-180`\n- **Props**: `{\"isOpen\":false}`\n\n#### isOpenTrue\n- **Description**: isOpen is true\n- **Triggers**: setIsOpen(true)\n- **CSS Classes**: `rotate-180`\n- **Props**: `{\"isOpen\":true}`\n\n#### isOpenFalse\n- **Description**: isOpen is false\n- **Triggers**: setIsOpen(false)\n- **CSS Classes**: `rotate-180`\n- **Props**: `{\"isOpen\":false}`\n\n#### isOpenTrue\n- **Description**: isOpen is true\n- **Triggers**: setIsOpen(true)\n- **CSS Classes**: `rotate-180`\n- **Props**: `{\"isOpen\":true}`\n\n#### isVisibleFalse\n- **Description**: isVisible is false\n- **Triggers**: setIsVisible(false)\n- **CSS Classes**: ``\n- **Props**: `{\"isVisible\":false}`\n\n#### isVisibleTrue\n- **Description**: isVisible is true\n- **Triggers**: setIsVisible(true)\n- **CSS Classes**: ``\n- **Props**: `{\"isVisible\":true}`\n\n#### loading\n- **Description**: Component is in loading state\n- **Triggers**: async action started\n- **CSS Classes**: `animate-pulse opacity-50 cursor-not-allowed`\n- **Props**: `{\"loading\":true}`\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n#### success\n- **Description**: Component is in success state\n- **Triggers**: operation completed\n- **CSS Classes**: `border-green-500 text-green-600 bg-green-50`\n- **Props**: `{\"success\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isVisibleFalse : isVisible is false\n    isVisibleTrue : isVisible is true\n    loading : Component is in loading state\n    disabled : Component is disabled\n    error : Component has error state\n    success : Component is in success state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : textValue\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<HeaderOrganism />\n\n// Loading state\n<HeaderOrganism loading />\n\n// Error state\n<HeaderOrganism error=\"Something went wrong\" />\n\n// Success state\n<HeaderOrganism success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('HeaderOrganism States', () => {\n  it('renders default state', () => {\n    render(<HeaderOrganism />);\n  });\n  \n  it('renders loading state', () => {\n    render(<HeaderOrganism loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<HeaderOrganism error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>HeaderOrganism State Machine</h1>\n<h2>Overview</h2>\n<p>Header context</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isOpenFalse</h4>\n<ul>\n<li><strong>Description</strong>: isOpen is false</li>\n<li><strong>Triggers</strong>: setIsOpen(false)</li>\n<li><strong>CSS Classes</strong>: <code>rotate-180</code></li>\n<li><strong>Props</strong>: <code>{\"isOpen\":false}</code></li>\n</ul>\n<h4>isOpenTrue</h4>\n<ul>\n<li><strong>Description</strong>: isOpen is true</li>\n<li><strong>Triggers</strong>: setIsOpen(true)</li>\n<li><strong>CSS Classes</strong>: <code>rotate-180</code></li>\n<li><strong>Props</strong>: <code>{\"isOpen\":true}</code></li>\n</ul>\n<h4>isOpenFalse</h4>\n<ul>\n<li><strong>Description</strong>: isOpen is false</li>\n<li><strong>Triggers</strong>: setIsOpen(false)</li>\n<li><strong>CSS Classes</strong>: <code>rotate-180</code></li>\n<li><strong>Props</strong>: <code>{\"isOpen\":false}</code></li>\n</ul>\n<h4>isOpenTrue</h4>\n<ul>\n<li><strong>Description</strong>: isOpen is true</li>\n<li><strong>Triggers</strong>: setIsOpen(true)</li>\n<li><strong>CSS Classes</strong>: <code>rotate-180</code></li>\n<li><strong>Props</strong>: <code>{\"isOpen\":true}</code></li>\n</ul>\n<h4>isVisibleFalse</h4>\n<ul>\n<li><strong>Description</strong>: isVisible is false</li>\n<li><strong>Triggers</strong>: setIsVisible(false)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isVisible\":false}</code></li>\n</ul>\n<h4>isVisibleTrue</h4>\n<ul>\n<li><strong>Description</strong>: isVisible is true</li>\n<li><strong>Triggers</strong>: setIsVisible(true)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isVisible\":true}</code></li>\n</ul>\n<h4>loading</h4>\n<ul>\n<li><strong>Description</strong>: Component is in loading state</li>\n<li><strong>Triggers</strong>: async action started</li>\n<li><strong>CSS Classes</strong>: <code>animate-pulse opacity-50 cursor-not-allowed</code></li>\n<li><strong>Props</strong>: <code>{\"loading\":true}</code></li>\n</ul>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h4>success</h4>\n<ul>\n<li><strong>Description</strong>: Component is in success state</li>\n<li><strong>Triggers</strong>: operation completed</li>\n<li><strong>CSS Classes</strong>: <code>border-green-500 text-green-600 bg-green-50</code></li>\n<li><strong>Props</strong>: <code>{\"success\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isOpenFalse : isOpen is false\n    isOpenTrue : isOpen is true\n    isVisibleFalse : isVisible is false\n    isVisibleTrue : isVisible is true\n    loading : Component is in loading state\n    disabled : Component is disabled\n    error : Component has error state\n    success : Component is in success state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : textValue\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;HeaderOrganism />\n\n// Loading state\n&#x3C;HeaderOrganism loading />\n\n// Error state\n&#x3C;HeaderOrganism error=\"Something went wrong\" />\n\n// Success state\n&#x3C;HeaderOrganism success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('HeaderOrganism States', () => {\n  it('renders default state', () => {\n    render(&#x3C;HeaderOrganism />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;HeaderOrganism loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;HeaderOrganism error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:06.980Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 17,
        "fileSize": 17262
      }
    },
    {
      "id": "designsystemgraph-molecular-molecular-design-system-graph-design-system-graph-molecular-tsx",
      "metadata": {
        "id": "designsystemgraph-molecular-molecular-design-system-graph-design-system-graph-molecular-tsx",
        "name": "DesignSystemGraph",
        "category": "molecular",
        "path": "molecular/design-system-graph/design-system-graph.molecular.tsx",
        "filePath": "components/molecular/design-system-graph/design-system-graph.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Custom node component that renders our component cards",
        "dependencies": [
          "lib/design-system/component-snapshot-generator",
          "components/atomic/component-card/component-card.atomic",
          "components/atomic/button/button.atomic",
          "design-system-graph.module.scss"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:52:30.104Z",
        "size": 10153,
        "exports": [
          "DesignSystemGraph"
        ],
        "props": [
          {
            "name": "components",
            "type": "ComponentSnapshot[]",
            "required": true
          },
          {
            "name": "onComponentSelect",
            "type": "(component: ComponentSnapshot) => void",
            "required": true
          },
          {
            "name": "searchQuery",
            "type": "string",
            "required": false
          },
          {
            "name": "selectedCategory",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "DesignSystemGraph",
        "initialState": "idle",
        "states": [
          {
            "name": "idle",
            "description": "Component in default/idle state",
            "triggers": [
              "initial render"
            ],
            "transitions": [],
            "cssClasses": [
              "border",
              "rounded-lg"
            ],
            "props": {}
          },
          {
            "name": "interactive",
            "description": "Component ready for user interaction",
            "triggers": [
              "hover",
              "focus"
            ],
            "transitions": [],
            "cssClasses": [
              "hover:bg-gray-50",
              "focus:border-dashed"
            ],
            "props": {}
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# DesignSystemGraph State Machine\n\n## Overview\nCustom node component that renders our component cards\n\n## Component States\n\n### Logical States\n\n#### idle\n- **Description**: Component in default/idle state\n- **Triggers**: initial render\n- **CSS Classes**: `border rounded-lg`\n- **Props**: `{}`\n\n#### interactive\n- **Description**: Component ready for user interaction\n- **Triggers**: hover, focus\n- **CSS Classes**: `hover:bg-gray-50 focus:border-dashed`\n- **Props**: `{}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<DesignSystemGraph />\n\n// Loading state\n<DesignSystemGraph loading />\n\n// Error state\n<DesignSystemGraph error=\"Something went wrong\" />\n\n// Success state\n<DesignSystemGraph success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('DesignSystemGraph States', () => {\n  it('renders default state', () => {\n    render(<DesignSystemGraph />);\n  });\n  \n  it('renders loading state', () => {\n    render(<DesignSystemGraph loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<DesignSystemGraph error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>DesignSystemGraph State Machine</h1>\n<h2>Overview</h2>\n<p>Custom node component that renders our component cards</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>idle</h4>\n<ul>\n<li><strong>Description</strong>: Component in default/idle state</li>\n<li><strong>Triggers</strong>: initial render</li>\n<li><strong>CSS Classes</strong>: <code>border rounded-lg</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h4>interactive</h4>\n<ul>\n<li><strong>Description</strong>: Component ready for user interaction</li>\n<li><strong>Triggers</strong>: hover, focus</li>\n<li><strong>CSS Classes</strong>: <code>hover:bg-gray-50 focus:border-dashed</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;DesignSystemGraph />\n\n// Loading state\n&#x3C;DesignSystemGraph loading />\n\n// Error state\n&#x3C;DesignSystemGraph error=\"Something went wrong\" />\n\n// Success state\n&#x3C;DesignSystemGraph success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('DesignSystemGraph States', () => {\n  it('renders default state', () => {\n    render(&#x3C;DesignSystemGraph />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;DesignSystemGraph loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;DesignSystemGraph error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:06.994Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 13,
        "fileSize": 10153
      }
    },
    {
      "id": "designsystemsidebar-molecular-molecular-design-system-sidebar-design-system-sidebar-molecular-tsx",
      "metadata": {
        "id": "designsystemsidebar-molecular-molecular-design-system-sidebar-design-system-sidebar-molecular-tsx",
        "name": "DesignSystemSidebar",
        "category": "molecular",
        "path": "molecular/design-system-sidebar/design-system-sidebar.molecular.tsx",
        "filePath": "components/molecular/design-system-sidebar/design-system-sidebar.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Component description not available",
        "dependencies": [
          "lib/design-system/component-discovery",
          "components/atomic/glass-card/glass-card.atomic",
          "components/atomic/button/button.atomic"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:24:46.234Z",
        "size": 8850,
        "exports": [
          "DesignSystemSidebar"
        ],
        "props": [
          {
            "name": "components",
            "type": "ComponentMetadata[]",
            "required": true
          },
          {
            "name": "selectedComponent",
            "type": "ComponentMetadata | null",
            "required": true
          },
          {
            "name": "viewMode",
            "type": "'grid' | 'flow' | 'audit' | 'visual-comparison' | 'tree' | 'docs'",
            "required": true
          },
          {
            "name": "searchQuery",
            "type": "string",
            "required": true
          },
          {
            "name": "selectedCategory",
            "type": "string",
            "required": true
          },
          {
            "name": "onComponentSelect",
            "type": "(component: ComponentMetadata) => void",
            "required": true
          },
          {
            "name": "onViewModeChange",
            "type": "(mode: 'grid' | 'flow' | 'audit' | 'visual-comparison' | 'tree' | 'docs') => void",
            "required": true
          },
          {
            "name": "onSearchChange",
            "type": "(query: string) => void",
            "required": true
          },
          {
            "name": "onCategoryChange",
            "type": "(category: string) => void",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "DesignSystemSidebar",
        "initialState": "idle",
        "states": [
          {
            "name": "idle",
            "description": "Component in default/idle state",
            "triggers": [
              "initial render"
            ],
            "transitions": [],
            "cssClasses": [
              "border",
              "rounded-lg"
            ],
            "props": {}
          },
          {
            "name": "interactive",
            "description": "Component ready for user interaction",
            "triggers": [
              "hover",
              "focus"
            ],
            "transitions": [],
            "cssClasses": [
              "hover:bg-gray-50",
              "focus:border-dashed"
            ],
            "props": {}
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# DesignSystemSidebar State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### idle\n- **Description**: Component in default/idle state\n- **Triggers**: initial render\n- **CSS Classes**: `border rounded-lg`\n- **Props**: `{}`\n\n#### interactive\n- **Description**: Component ready for user interaction\n- **Triggers**: hover, focus\n- **CSS Classes**: `hover:bg-gray-50 focus:border-dashed`\n- **Props**: `{}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<DesignSystemSidebar />\n\n// Loading state\n<DesignSystemSidebar loading />\n\n// Error state\n<DesignSystemSidebar error=\"Something went wrong\" />\n\n// Success state\n<DesignSystemSidebar success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('DesignSystemSidebar States', () => {\n  it('renders default state', () => {\n    render(<DesignSystemSidebar />);\n  });\n  \n  it('renders loading state', () => {\n    render(<DesignSystemSidebar loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<DesignSystemSidebar error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>DesignSystemSidebar State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>idle</h4>\n<ul>\n<li><strong>Description</strong>: Component in default/idle state</li>\n<li><strong>Triggers</strong>: initial render</li>\n<li><strong>CSS Classes</strong>: <code>border rounded-lg</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h4>interactive</h4>\n<ul>\n<li><strong>Description</strong>: Component ready for user interaction</li>\n<li><strong>Triggers</strong>: hover, focus</li>\n<li><strong>CSS Classes</strong>: <code>hover:bg-gray-50 focus:border-dashed</code></li>\n<li><strong>Props</strong>: <code>{}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    idle : Component in default/idle state\n    interactive : Component ready for user interaction\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;DesignSystemSidebar />\n\n// Loading state\n&#x3C;DesignSystemSidebar loading />\n\n// Error state\n&#x3C;DesignSystemSidebar error=\"Something went wrong\" />\n\n// Success state\n&#x3C;DesignSystemSidebar success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('DesignSystemSidebar States', () => {\n  it('renders default state', () => {\n    render(&#x3C;DesignSystemSidebar />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;DesignSystemSidebar loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;DesignSystemSidebar error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.008Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 14,
        "fileSize": 8850
      }
    },
    {
      "id": "componentstatedocviewer-molecular-molecular-component-state-doc-viewer-component-state-doc-viewer-molecular-tsx",
      "metadata": {
        "id": "componentstatedocviewer-molecular-molecular-component-state-doc-viewer-component-state-doc-viewer-molecular-tsx",
        "name": "ComponentStateDocViewer",
        "category": "molecular",
        "path": "molecular/component-state-doc-viewer/component-state-doc-viewer.molecular.tsx",
        "filePath": "components/molecular/component-state-doc-viewer/component-state-doc-viewer.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Component description not available",
        "dependencies": [
          "components/atomic/markdown-renderer/markdown-renderer.atomic",
          "lib/design-system/component-state-analyzer",
          "lib/design-system/component-discovery",
          "components/atomic/glass-card/glass-card.atomic",
          "components/atomic/button/button.atomic"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:23:56.235Z",
        "size": 5881,
        "exports": [
          "ComponentStateDocViewer"
        ],
        "props": [
          {
            "name": "component",
            "type": "ComponentMetadata",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "ComponentStateDocViewer",
        "initialState": "isLoadingFalse",
        "states": [
          {
            "name": "isLoadingFalse",
            "description": "isLoading is false",
            "triggers": [
              "setIsLoading(false)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isLoading": false
            }
          },
          {
            "name": "isLoadingTrue",
            "description": "isLoading is true",
            "triggers": [
              "setIsLoading(true)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isLoading": true
            }
          },
          {
            "name": "showRawDataFalse",
            "description": "showRawData is false",
            "triggers": [
              "setShowRawData(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "Hide",
              "Raw"
            ],
            "props": {
              "showRawData": false
            }
          },
          {
            "name": "showRawDataTrue",
            "description": "showRawData is true",
            "triggers": [
              "setShowRawData(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "Hide",
              "Raw"
            ],
            "props": {
              "showRawData": true
            }
          },
          {
            "name": "loading",
            "description": "Component is in loading state",
            "triggers": [
              "async action started"
            ],
            "transitions": [],
            "cssClasses": [
              "animate-pulse",
              "opacity-50",
              "cursor-not-allowed"
            ],
            "props": {
              "loading": true
            }
          },
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setShowRawData(!showRawData)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isLoadingFalse : isLoading is false\n    isLoadingTrue : isLoading is true\n    showRawDataFalse : showRawData is false\n    showRawDataTrue : showRawData is true\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# ComponentStateDocViewer State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### isLoadingFalse\n- **Description**: isLoading is false\n- **Triggers**: setIsLoading(false)\n- **CSS Classes**: ``\n- **Props**: `{\"isLoading\":false}`\n\n#### isLoadingTrue\n- **Description**: isLoading is true\n- **Triggers**: setIsLoading(true)\n- **CSS Classes**: ``\n- **Props**: `{\"isLoading\":true}`\n\n#### showRawDataFalse\n- **Description**: showRawData is false\n- **Triggers**: setShowRawData(false)\n- **CSS Classes**: `Hide Raw`\n- **Props**: `{\"showRawData\":false}`\n\n#### showRawDataTrue\n- **Description**: showRawData is true\n- **Triggers**: setShowRawData(true)\n- **CSS Classes**: `Hide Raw`\n- **Props**: `{\"showRawData\":true}`\n\n#### loading\n- **Description**: Component is in loading state\n- **Triggers**: async action started\n- **CSS Classes**: `animate-pulse opacity-50 cursor-not-allowed`\n- **Props**: `{\"loading\":true}`\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isLoadingFalse : isLoading is false\n    isLoadingTrue : isLoading is true\n    showRawDataFalse : showRawData is false\n    showRawDataTrue : showRawData is true\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<ComponentStateDocViewer />\n\n// Loading state\n<ComponentStateDocViewer loading />\n\n// Error state\n<ComponentStateDocViewer error=\"Something went wrong\" />\n\n// Success state\n<ComponentStateDocViewer success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('ComponentStateDocViewer States', () => {\n  it('renders default state', () => {\n    render(<ComponentStateDocViewer />);\n  });\n  \n  it('renders loading state', () => {\n    render(<ComponentStateDocViewer loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<ComponentStateDocViewer error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>ComponentStateDocViewer State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isLoadingFalse</h4>\n<ul>\n<li><strong>Description</strong>: isLoading is false</li>\n<li><strong>Triggers</strong>: setIsLoading(false)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isLoading\":false}</code></li>\n</ul>\n<h4>isLoadingTrue</h4>\n<ul>\n<li><strong>Description</strong>: isLoading is true</li>\n<li><strong>Triggers</strong>: setIsLoading(true)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isLoading\":true}</code></li>\n</ul>\n<h4>showRawDataFalse</h4>\n<ul>\n<li><strong>Description</strong>: showRawData is false</li>\n<li><strong>Triggers</strong>: setShowRawData(false)</li>\n<li><strong>CSS Classes</strong>: <code>Hide Raw</code></li>\n<li><strong>Props</strong>: <code>{\"showRawData\":false}</code></li>\n</ul>\n<h4>showRawDataTrue</h4>\n<ul>\n<li><strong>Description</strong>: showRawData is true</li>\n<li><strong>Triggers</strong>: setShowRawData(true)</li>\n<li><strong>CSS Classes</strong>: <code>Hide Raw</code></li>\n<li><strong>Props</strong>: <code>{\"showRawData\":true}</code></li>\n</ul>\n<h4>loading</h4>\n<ul>\n<li><strong>Description</strong>: Component is in loading state</li>\n<li><strong>Triggers</strong>: async action started</li>\n<li><strong>CSS Classes</strong>: <code>animate-pulse opacity-50 cursor-not-allowed</code></li>\n<li><strong>Props</strong>: <code>{\"loading\":true}</code></li>\n</ul>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isLoadingFalse : isLoading is false\n    isLoadingTrue : isLoading is true\n    showRawDataFalse : showRawData is false\n    showRawDataTrue : showRawData is true\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;ComponentStateDocViewer />\n\n// Loading state\n&#x3C;ComponentStateDocViewer loading />\n\n// Error state\n&#x3C;ComponentStateDocViewer error=\"Something went wrong\" />\n\n// Success state\n&#x3C;ComponentStateDocViewer success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('ComponentStateDocViewer States', () => {\n  it('renders default state', () => {\n    render(&#x3C;ComponentStateDocViewer />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;ComponentStateDocViewer loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;ComponentStateDocViewer error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.022Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 13,
        "fileSize": 5881
      }
    },
    {
      "id": "projectexploreratomic-molecular-molecular-project-explorer-project-explorer-atomic-tsx",
      "metadata": {
        "id": "projectexploreratomic-molecular-molecular-project-explorer-project-explorer-atomic-tsx",
        "name": "ProjectExplorerAtomic",
        "category": "molecular",
        "path": "molecular/project-explorer/project-explorer.atomic.tsx",
        "filePath": "components/molecular/project-explorer/project-explorer.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Event-driven types matching the micro-ux-explorer",
        "dependencies": [
          "lib/utils/timestamp"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.860Z",
        "size": 13193,
        "exports": [
          "ProjectExplorerAtomic"
        ],
        "props": [
          {
            "name": "initialData",
            "type": "TransportableUIData",
            "required": false
          },
          {
            "name": "onNodeSelect",
            "type": "(node: TreeViewData | GridViewData) => void",
            "required": false
          },
          {
            "name": "onEventGenerated",
            "type": "(event: ExplorerEvent) => void",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "ProjectExplorerAtomic",
        "initialState": "loading",
        "states": [
          {
            "name": "loading",
            "description": "Component is in loading state",
            "triggers": [
              "async action started"
            ],
            "transitions": [],
            "cssClasses": [
              "animate-pulse",
              "opacity-50",
              "cursor-not-allowed"
            ],
            "props": {
              "loading": true
            }
          },
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setViewMode(\"tree\")"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setViewMode(\"grid\")"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Change",
            "effect": "setSearchQuery(e.target.value)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Change\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# ProjectExplorerAtomic State Machine\n\n## Overview\nEvent-driven types matching the micro-ux-explorer\n\n## Component States\n\n### Logical States\n\n#### loading\n- **Description**: Component is in loading state\n- **Triggers**: async action started\n- **CSS Classes**: `animate-pulse opacity-50 cursor-not-allowed`\n- **Props**: `{\"loading\":true}`\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Change\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<ProjectExplorerAtomic />\n\n// Loading state\n<ProjectExplorerAtomic loading />\n\n// Error state\n<ProjectExplorerAtomic error=\"Something went wrong\" />\n\n// Success state\n<ProjectExplorerAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('ProjectExplorerAtomic States', () => {\n  it('renders default state', () => {\n    render(<ProjectExplorerAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<ProjectExplorerAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<ProjectExplorerAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>ProjectExplorerAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>Event-driven types matching the micro-ux-explorer</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>loading</h4>\n<ul>\n<li><strong>Description</strong>: Component is in loading state</li>\n<li><strong>Triggers</strong>: async action started</li>\n<li><strong>CSS Classes</strong>: <code>animate-pulse opacity-50 cursor-not-allowed</code></li>\n<li><strong>Props</strong>: <code>{\"loading\":true}</code></li>\n</ul>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    loading : Component is in loading state\n    error : Component has error state\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Change\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;ProjectExplorerAtomic />\n\n// Loading state\n&#x3C;ProjectExplorerAtomic loading />\n\n// Error state\n&#x3C;ProjectExplorerAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;ProjectExplorerAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('ProjectExplorerAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;ProjectExplorerAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;ProjectExplorerAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;ProjectExplorerAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.034Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 11,
        "fileSize": 13193
      }
    },
    {
      "id": "types-molecular-molecular-navigation-types-ts",
      "metadata": {
        "id": "types-molecular-molecular-navigation-types-ts",
        "name": "Types",
        "category": "molecular",
        "path": "molecular/navigation/types.ts",
        "filePath": "components/molecular/navigation/types.ts",
        "testStatus": "unknown",
        "usageCount": 5,
        "description": "Component description not available",
        "dependencies": [
          "components/atomic/header"
        ],
        "usedBy": [
          "headerorganism-organism-organisms-header-header-organism-tsx",
          "navigationmolecular-molecular-molecular-navigation-navigation-molecular-tsx",
          "glasscardatomic-atomic-atomic-glass-card-glass-card-atomic-tsx",
          "buttonatomic-atomic-atomic-button-button-atomic-tsx",
          "headeratomic-atomic-atomic-header-header-atomic-tsx"
        ],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.872Z",
        "size": 3839,
        "exports": [
          "NavigationItem",
          "NavigationLogo",
          "NavigationMolecularProps",
          "NavigationDropdownProps",
          "MobileMenuProps",
          "NavigationBreadcrumbProps",
          "NavigationTabsProps"
        ],
        "props": [
          {
            "name": "items",
            "type": "NavigationItem[]",
            "required": true
          },
          {
            "name": "isOpen",
            "type": "boolean",
            "required": true
          },
          {
            "name": "onOpenChange",
            "type": "(open: boolean) => void",
            "required": true
          },
          {
            "name": "trigger",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "align",
            "type": "\"start\" | \"center\" | \"end\"",
            "required": false
          },
          {
            "name": "side",
            "type": "\"top\" | \"right\" | \"bottom\" | \"left\"",
            "required": false
          },
          {
            "name": "isOpen",
            "type": "boolean",
            "required": true
          },
          {
            "name": "onOpenChange",
            "type": "(open: boolean) => void",
            "required": true
          },
          {
            "name": "items",
            "type": "NavigationItem[]",
            "required": true
          },
          {
            "name": "logo",
            "type": "NavigationLogo",
            "required": false
          },
          {
            "name": "actions",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "animation",
            "type": "\"slide\" | \"fade\" | \"scale\"",
            "required": false
          },
          {
            "name": "items",
            "type": "Omit<NavigationItem, \"children\">[]",
            "required": true
          },
          {
            "name": "separator",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "maxItems",
            "type": "number",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "items",
            "type": "Omit<NavigationItem, \"children\">[]",
            "required": true
          },
          {
            "name": "activeTab",
            "type": "string",
            "required": false
          },
          {
            "name": "onTabChange",
            "type": "(tabId: string) => void",
            "required": false
          },
          {
            "name": "variant",
            "type": "\"default\" | \"pills\" | \"underline\"",
            "required": false
          },
          {
            "name": "size",
            "type": "\"sm\" | \"md\" | \"lg\"",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "scrollable",
            "type": "boolean",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "Types",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          },
          {
            "name": "success",
            "description": "Component is in success state",
            "triggers": [
              "operation completed"
            ],
            "transitions": [],
            "cssClasses": [
              "border-green-500",
              "text-green-600",
              "bg-green-50"
            ],
            "props": {
              "success": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    success : Component is in success state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# Types State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n#### success\n- **Description**: Component is in success state\n- **Triggers**: operation completed\n- **CSS Classes**: `border-green-500 text-green-600 bg-green-50`\n- **Props**: `{\"success\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    success : Component is in success state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<Types />\n\n// Loading state\n<Types loading />\n\n// Error state\n<Types error=\"Something went wrong\" />\n\n// Success state\n<Types success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(<Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(<Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<Types error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>Types State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h4>success</h4>\n<ul>\n<li><strong>Description</strong>: Component is in success state</li>\n<li><strong>Triggers</strong>: operation completed</li>\n<li><strong>CSS Classes</strong>: <code>border-green-500 text-green-600 bg-green-50</code></li>\n<li><strong>Props</strong>: <code>{\"success\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    success : Component is in success state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;Types />\n\n// Loading state\n&#x3C;Types loading />\n\n// Error state\n&#x3C;Types error=\"Something went wrong\" />\n\n// Success state\n&#x3C;Types success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(&#x3C;Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;Types error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.044Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 9,
        "fileSize": 3839
      }
    },
    {
      "id": "navigationmolecular-molecular-molecular-navigation-navigation-molecular-tsx",
      "metadata": {
        "id": "navigationmolecular-molecular-molecular-navigation-navigation-molecular-tsx",
        "name": "NavigationMolecular",
        "category": "molecular",
        "path": "molecular/navigation/navigation.molecular.tsx",
        "filePath": "components/molecular/navigation/navigation.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Close mobile menu when resizing to desktop",
        "dependencies": [
          "lib/utils",
          "components/atomic/button",
          "components/atomic/header",
          "types"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T05:53:43.858Z",
        "size": 10758,
        "exports": [
          "NavigationMolecular"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "NavigationMolecular",
        "initialState": "isMobileMenuOpenFalse",
        "states": [
          {
            "name": "isMobileMenuOpenFalse",
            "description": "isMobileMenuOpen is false",
            "triggers": [
              "setIsMobileMenuOpen(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "Close",
              "menu"
            ],
            "props": {
              "isMobileMenuOpen": false
            }
          },
          {
            "name": "isMobileMenuOpenTrue",
            "description": "isMobileMenuOpen is true",
            "triggers": [
              "setIsMobileMenuOpen(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "Close",
              "menu"
            ],
            "props": {
              "isMobileMenuOpen": true
            }
          },
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsMobileMenuOpen(!isMobileMenuOpen)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsMobileMenuOpen(false)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "Click",
            "effect": "setIsMobileMenuOpen(false)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isMobileMenuOpenFalse : isMobileMenuOpen is false\n    isMobileMenuOpenTrue : isMobileMenuOpen is true\n    disabled : Component is disabled\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# NavigationMolecular State Machine\n\n## Overview\nClose mobile menu when resizing to desktop\n\n## Component States\n\n### Logical States\n\n#### isMobileMenuOpenFalse\n- **Description**: isMobileMenuOpen is false\n- **Triggers**: setIsMobileMenuOpen(false)\n- **CSS Classes**: `Close menu`\n- **Props**: `{\"isMobileMenuOpen\":false}`\n\n#### isMobileMenuOpenTrue\n- **Description**: isMobileMenuOpen is true\n- **Triggers**: setIsMobileMenuOpen(true)\n- **CSS Classes**: `Close menu`\n- **Props**: `{\"isMobileMenuOpen\":true}`\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isMobileMenuOpenFalse : isMobileMenuOpen is false\n    isMobileMenuOpenTrue : isMobileMenuOpen is true\n    disabled : Component is disabled\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<NavigationMolecular />\n\n// Loading state\n<NavigationMolecular loading />\n\n// Error state\n<NavigationMolecular error=\"Something went wrong\" />\n\n// Success state\n<NavigationMolecular success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('NavigationMolecular States', () => {\n  it('renders default state', () => {\n    render(<NavigationMolecular />);\n  });\n  \n  it('renders loading state', () => {\n    render(<NavigationMolecular loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<NavigationMolecular error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>NavigationMolecular State Machine</h1>\n<h2>Overview</h2>\n<p>Close mobile menu when resizing to desktop</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isMobileMenuOpenFalse</h4>\n<ul>\n<li><strong>Description</strong>: isMobileMenuOpen is false</li>\n<li><strong>Triggers</strong>: setIsMobileMenuOpen(false)</li>\n<li><strong>CSS Classes</strong>: <code>Close menu</code></li>\n<li><strong>Props</strong>: <code>{\"isMobileMenuOpen\":false}</code></li>\n</ul>\n<h4>isMobileMenuOpenTrue</h4>\n<ul>\n<li><strong>Description</strong>: isMobileMenuOpen is true</li>\n<li><strong>Triggers</strong>: setIsMobileMenuOpen(true)</li>\n<li><strong>CSS Classes</strong>: <code>Close menu</code></li>\n<li><strong>Props</strong>: <code>{\"isMobileMenuOpen\":true}</code></li>\n</ul>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isMobileMenuOpenFalse : isMobileMenuOpen is false\n    isMobileMenuOpenTrue : isMobileMenuOpen is true\n    disabled : Component is disabled\n    any --> new_state : Click\n    any --> new_state : Click\n    any --> new_state : Click\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;NavigationMolecular />\n\n// Loading state\n&#x3C;NavigationMolecular loading />\n\n// Error state\n&#x3C;NavigationMolecular error=\"Something went wrong\" />\n\n// Success state\n&#x3C;NavigationMolecular success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('NavigationMolecular States', () => {\n  it('renders default state', () => {\n    render(&#x3C;NavigationMolecular />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;NavigationMolecular loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;NavigationMolecular error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.058Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 13,
        "fileSize": 10758
      }
    },
    {
      "id": "designsystemmaincontent-molecular-molecular-design-system-main-content-design-system-main-content-molecular-tsx",
      "metadata": {
        "id": "designsystemmaincontent-molecular-molecular-design-system-main-content-design-system-main-content-molecular-tsx",
        "name": "DesignSystemMainContent",
        "category": "molecular",
        "path": "molecular/design-system-main-content/design-system-main-content.molecular.tsx",
        "filePath": "components/molecular/design-system-main-content/design-system-main-content.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "localhost:3000/design-system?component=${component.id}`,",
        "dependencies": [
          "lib/design-system/component-discovery",
          "components/molecular/component-state-doc-viewer/component-state-doc-viewer.molecular",
          "app/(internetfriends)/design-system/components/component-flow-dashboard",
          "app/(internetfriends)/design-system/components/visual-comparison-panel",
          "app/(internetfriends)/design-system/components/virtualized-component-list",
          "components/atomic/glass-card/glass-card.atomic",
          "components/atomic/button/button.atomic"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:25:33.670Z",
        "size": 9048,
        "exports": [
          "DesignSystemMainContent"
        ],
        "props": [
          {
            "name": "viewMode",
            "type": "'grid' | 'flow' | 'audit' | 'visual-comparison' | 'tree' | 'docs'",
            "required": true
          },
          {
            "name": "components",
            "type": "ComponentMetadata[]",
            "required": true
          },
          {
            "name": "relationships",
            "type": "ComponentRelationship[]",
            "required": true
          },
          {
            "name": "selectedComponent",
            "type": "ComponentMetadata | null",
            "required": true
          },
          {
            "name": "searchQuery",
            "type": "string",
            "required": true
          },
          {
            "name": "selectedCategory",
            "type": "string",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "DesignSystemMainContent",
        "initialState": "error",
        "states": [
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# DesignSystemMainContent State Machine\n\n## Overview\nlocalhost:3000/design-system?component=${component.id}`,\n\n## Component States\n\n### Logical States\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<DesignSystemMainContent />\n\n// Loading state\n<DesignSystemMainContent loading />\n\n// Error state\n<DesignSystemMainContent error=\"Something went wrong\" />\n\n// Success state\n<DesignSystemMainContent success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('DesignSystemMainContent States', () => {\n  it('renders default state', () => {\n    render(<DesignSystemMainContent />);\n  });\n  \n  it('renders loading state', () => {\n    render(<DesignSystemMainContent loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<DesignSystemMainContent error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>DesignSystemMainContent State Machine</h1>\n<h2>Overview</h2>\n<p>localhost:3000/design-system?component=${component.id}`,</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;DesignSystemMainContent />\n\n// Loading state\n&#x3C;DesignSystemMainContent loading />\n\n// Error state\n&#x3C;DesignSystemMainContent error=\"Something went wrong\" />\n\n// Success state\n&#x3C;DesignSystemMainContent success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('DesignSystemMainContent States', () => {\n  it('renders default state', () => {\n    render(&#x3C;DesignSystemMainContent />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;DesignSystemMainContent loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;DesignSystemMainContent error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.065Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 6,
        "fileSize": 9048
      }
    },
    {
      "id": "componentdetailmodal-molecular-molecular-component-detail-modal-component-detail-modal-molecular-tsx",
      "metadata": {
        "id": "componentdetailmodal-molecular-molecular-component-detail-modal-component-detail-modal-molecular-tsx",
        "name": "ComponentDetailModal",
        "category": "molecular",
        "path": "molecular/component-detail-modal/component-detail-modal.molecular.tsx",
        "filePath": "components/molecular/component-detail-modal/component-detail-modal.molecular.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Handle escape key and click outside",
        "dependencies": [
          "lib/design-system/component-snapshot-generator",
          "components/atomic/markdown-renderer/markdown-renderer.atomic",
          "components/atomic/glass-card/glass-card.atomic",
          "components/atomic/button/button.atomic"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:36:28.956Z",
        "size": 11406,
        "exports": [
          "ComponentDetailModal"
        ],
        "props": [
          {
            "name": "component",
            "type": "ComponentSnapshot | null",
            "required": true
          },
          {
            "name": "isOpen",
            "type": "boolean",
            "required": true
          },
          {
            "name": "onClose",
            "type": "() => void",
            "required": true
          }
        ]
      },
      "stateMachine": {
        "componentName": "ComponentDetailModal",
        "initialState": "error",
        "states": [
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# ComponentDetailModal State Machine\n\n## Overview\nHandle escape key and click outside\n\n## Component States\n\n### Logical States\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<ComponentDetailModal />\n\n// Loading state\n<ComponentDetailModal loading />\n\n// Error state\n<ComponentDetailModal error=\"Something went wrong\" />\n\n// Success state\n<ComponentDetailModal success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('ComponentDetailModal States', () => {\n  it('renders default state', () => {\n    render(<ComponentDetailModal />);\n  });\n  \n  it('renders loading state', () => {\n    render(<ComponentDetailModal loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<ComponentDetailModal error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>ComponentDetailModal State Machine</h1>\n<h2>Overview</h2>\n<p>Handle escape key and click outside</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;ComponentDetailModal />\n\n// Loading state\n&#x3C;ComponentDetailModal loading />\n\n// Error state\n&#x3C;ComponentDetailModal error=\"Something went wrong\" />\n\n// Success state\n&#x3C;ComponentDetailModal success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('ComponentDetailModal States', () => {\n  it('renders default state', () => {\n    render(&#x3C;ComponentDetailModal />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;ComponentDetailModal loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;ComponentDetailModal error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.075Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 10,
        "fileSize": 11406
      }
    },
    {
      "id": "glasscardatomic-atomic-atomic-glass-card-glass-card-atomic-tsx",
      "metadata": {
        "id": "glasscardatomic-atomic-atomic-glass-card-glass-card-atomic-tsx",
        "name": "GlassCardAtomic",
        "category": "atomic",
        "path": "atomic/glass-card/glass-card.atomic.tsx",
        "filePath": "components/atomic/glass-card/glass-card.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Base glass card styles",
        "dependencies": [
          "lib/utils",
          "types"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T05:39:34.139Z",
        "size": 2785,
        "exports": [
          "GlassCardAtomic"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "GlassCardAtomic",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# GlassCardAtomic State Machine\n\n## Overview\nBase glass card styles\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<GlassCardAtomic />\n\n// Loading state\n<GlassCardAtomic loading />\n\n// Error state\n<GlassCardAtomic error=\"Something went wrong\" />\n\n// Success state\n<GlassCardAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('GlassCardAtomic States', () => {\n  it('renders default state', () => {\n    render(<GlassCardAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<GlassCardAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<GlassCardAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>GlassCardAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>Base glass card styles</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;GlassCardAtomic />\n\n// Loading state\n&#x3C;GlassCardAtomic loading />\n\n// Error state\n&#x3C;GlassCardAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;GlassCardAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('GlassCardAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;GlassCardAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;GlassCardAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;GlassCardAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.082Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 7,
        "fileSize": 2785
      }
    },
    {
      "id": "types-atomic-atomic-glass-card-types-ts",
      "metadata": {
        "id": "types-atomic-atomic-glass-card-types-ts",
        "name": "Types",
        "category": "atomic",
        "path": "atomic/glass-card/types.ts",
        "filePath": "components/atomic/glass-card/types.ts",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Component description not available",
        "dependencies": [],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.928Z",
        "size": 2355,
        "exports": [
          "GlassCardAtomicProps",
          "GlassCardHeaderProps",
          "GlassCardContentProps",
          "GlassCardFooterProps",
          "GlassCardImageProps",
          "GlassCardActionsProps"
        ],
        "props": [
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "actions",
            "type": "ReactNode",
            "required": false
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "scrollable",
            "type": "boolean",
            "required": false
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "alignment",
            "type": "\"left\" | \"center\" | \"right\" | \"between\"",
            "required": false
          },
          {
            "name": "src",
            "type": "string",
            "required": true
          },
          {
            "name": "alt",
            "type": "string",
            "required": true
          },
          {
            "name": "width",
            "type": "number",
            "required": false
          },
          {
            "name": "height",
            "type": "number",
            "required": false
          },
          {
            "name": "fill",
            "type": "boolean",
            "required": false
          },
          {
            "name": "objectFit",
            "type": "\"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\"",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "onClick",
            "type": "() => void",
            "required": false
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "direction",
            "type": "\"horizontal\" | \"vertical\"",
            "required": false
          },
          {
            "name": "spacing",
            "type": "\"tight\" | \"normal\" | \"loose\"",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "Types",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# Types State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<Types />\n\n// Loading state\n<Types loading />\n\n// Error state\n<Types error=\"Something went wrong\" />\n\n// Success state\n<Types success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(<Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(<Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<Types error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>Types State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;Types />\n\n// Loading state\n&#x3C;Types loading />\n\n// Error state\n&#x3C;Types error=\"Something went wrong\" />\n\n// Success state\n&#x3C;Types success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(&#x3C;Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;Types error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.088Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 5,
        "fileSize": 2355
      }
    },
    {
      "id": "componentcard-atomic-atomic-component-card-component-card-atomic-tsx",
      "metadata": {
        "id": "componentcard-atomic-atomic-component-card-component-card-atomic-tsx",
        "name": "ComponentCard",
        "category": "atomic",
        "path": "atomic/component-card/component-card.atomic.tsx",
        "filePath": "components/atomic/component-card/component-card.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Quick action: View code",
        "dependencies": [
          "lib/design-system/component-snapshot-generator",
          "components/atomic/glass-card/glass-card.atomic",
          "components/atomic/button/button.atomic"
        ],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:35:36.768Z",
        "size": 8928,
        "exports": [
          "ComponentCard"
        ],
        "props": [
          {
            "name": "component",
            "type": "ComponentSnapshot",
            "required": true
          },
          {
            "name": "onOpenDetails",
            "type": "(component: ComponentSnapshot) => void",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "ComponentCard",
        "initialState": "isHoveredFalse",
        "states": [
          {
            "name": "isHoveredFalse",
            "description": "isHovered is false",
            "triggers": [
              "setIsHovered(false)"
            ],
            "transitions": [],
            "cssClasses": [
              "scale-105",
              "z-10",
              "border-blue-400",
              "shadow-lg",
              "border-dashed",
              "translate-y-0"
            ],
            "props": {
              "isHovered": false
            }
          },
          {
            "name": "isHoveredTrue",
            "description": "isHovered is true",
            "triggers": [
              "setIsHovered(true)"
            ],
            "transitions": [],
            "cssClasses": [
              "scale-105",
              "z-10",
              "border-blue-400",
              "shadow-lg",
              "border-dashed",
              "translate-y-0"
            ],
            "props": {
              "isHovered": true
            }
          }
        ],
        "transitions": [
          {
            "from": "any",
            "to": "new_state",
            "trigger": "MouseEnter",
            "effect": "setIsHovered(true)"
          },
          {
            "from": "any",
            "to": "new_state",
            "trigger": "MouseLeave",
            "effect": "setIsHovered(false)"
          }
        ],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isHoveredFalse : isHovered is false\n    isHoveredTrue : isHovered is true\n    any --> new_state : MouseEnter\n    any --> new_state : MouseLeave\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# ComponentCard State Machine\n\n## Overview\nQuick action: View code\n\n## Component States\n\n### Logical States\n\n#### isHoveredFalse\n- **Description**: isHovered is false\n- **Triggers**: setIsHovered(false)\n- **CSS Classes**: `scale-105 z-10 border-blue-400 shadow-lg border-dashed translate-y-0`\n- **Props**: `{\"isHovered\":false}`\n\n#### isHoveredTrue\n- **Description**: isHovered is true\n- **Triggers**: setIsHovered(true)\n- **CSS Classes**: `scale-105 z-10 border-blue-400 shadow-lg border-dashed translate-y-0`\n- **Props**: `{\"isHovered\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isHoveredFalse : isHovered is false\n    isHoveredTrue : isHovered is true\n    any --> new_state : MouseEnter\n    any --> new_state : MouseLeave\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<ComponentCard />\n\n// Loading state\n<ComponentCard loading />\n\n// Error state\n<ComponentCard error=\"Something went wrong\" />\n\n// Success state\n<ComponentCard success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('ComponentCard States', () => {\n  it('renders default state', () => {\n    render(<ComponentCard />);\n  });\n  \n  it('renders loading state', () => {\n    render(<ComponentCard loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<ComponentCard error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>ComponentCard State Machine</h1>\n<h2>Overview</h2>\n<p>Quick action: View code</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isHoveredFalse</h4>\n<ul>\n<li><strong>Description</strong>: isHovered is false</li>\n<li><strong>Triggers</strong>: setIsHovered(false)</li>\n<li><strong>CSS Classes</strong>: <code>scale-105 z-10 border-blue-400 shadow-lg border-dashed translate-y-0</code></li>\n<li><strong>Props</strong>: <code>{\"isHovered\":false}</code></li>\n</ul>\n<h4>isHoveredTrue</h4>\n<ul>\n<li><strong>Description</strong>: isHovered is true</li>\n<li><strong>Triggers</strong>: setIsHovered(true)</li>\n<li><strong>CSS Classes</strong>: <code>scale-105 z-10 border-blue-400 shadow-lg border-dashed translate-y-0</code></li>\n<li><strong>Props</strong>: <code>{\"isHovered\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isHoveredFalse : isHovered is false\n    isHoveredTrue : isHovered is true\n    any --> new_state : MouseEnter\n    any --> new_state : MouseLeave\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;ComponentCard />\n\n// Loading state\n&#x3C;ComponentCard loading />\n\n// Error state\n&#x3C;ComponentCard error=\"Something went wrong\" />\n\n// Success state\n&#x3C;ComponentCard success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('ComponentCard States', () => {\n  it('renders default state', () => {\n    render(&#x3C;ComponentCard />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;ComponentCard loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;ComponentCard error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.098Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 10,
        "fileSize": 8928
      }
    },
    {
      "id": "markdownrendereratomic-atomic-atomic-markdown-renderer-markdown-renderer-atomic-tsx",
      "metadata": {
        "id": "markdownrendereratomic-atomic-atomic-markdown-renderer-markdown-renderer-atomic-tsx",
        "name": "MarkdownRendererAtomic",
        "category": "atomic",
        "path": "atomic/markdown-renderer/markdown-renderer.atomic.tsx",
        "filePath": "components/atomic/markdown-renderer/markdown-renderer.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Component description not available",
        "dependencies": [],
        "usedBy": [],
        "hasTypes": false,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T06:29:10.811Z",
        "size": 6909,
        "exports": [
          "MarkdownRendererAtomic"
        ],
        "props": [
          {
            "name": "content",
            "type": "string",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "enableMermaid",
            "type": "boolean",
            "required": false
          },
          {
            "name": "theme",
            "type": "\"light\" | \"dark\"",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "MarkdownRendererAtomic",
        "initialState": "error",
        "states": [
          {
            "name": "error",
            "description": "Component has error state",
            "triggers": [
              "error occurred"
            ],
            "transitions": [],
            "cssClasses": [
              "border-red-500",
              "text-red-600",
              "bg-red-50"
            ],
            "props": {
              "error": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# MarkdownRendererAtomic State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### error\n- **Description**: Component has error state\n- **Triggers**: error occurred\n- **CSS Classes**: `border-red-500 text-red-600 bg-red-50`\n- **Props**: `{\"error\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<MarkdownRendererAtomic />\n\n// Loading state\n<MarkdownRendererAtomic loading />\n\n// Error state\n<MarkdownRendererAtomic error=\"Something went wrong\" />\n\n// Success state\n<MarkdownRendererAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('MarkdownRendererAtomic States', () => {\n  it('renders default state', () => {\n    render(<MarkdownRendererAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<MarkdownRendererAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<MarkdownRendererAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>MarkdownRendererAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>error</h4>\n<ul>\n<li><strong>Description</strong>: Component has error state</li>\n<li><strong>Triggers</strong>: error occurred</li>\n<li><strong>CSS Classes</strong>: <code>border-red-500 text-red-600 bg-red-50</code></li>\n<li><strong>Props</strong>: <code>{\"error\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    error : Component has error state\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;MarkdownRendererAtomic />\n\n// Loading state\n&#x3C;MarkdownRendererAtomic loading />\n\n// Error state\n&#x3C;MarkdownRendererAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;MarkdownRendererAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('MarkdownRendererAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;MarkdownRendererAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;MarkdownRendererAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;MarkdownRendererAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.108Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 9,
        "fileSize": 6909
      }
    },
    {
      "id": "buttonatomic-atomic-atomic-button-button-atomic-tsx",
      "metadata": {
        "id": "buttonatomic-atomic-atomic-button-button-atomic-tsx",
        "name": "ButtonAtomic",
        "category": "atomic",
        "path": "atomic/button/button.atomic.tsx",
        "filePath": "components/atomic/button/button.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 1,
        "description": "InternetFriends Atomic Button Component",
        "dependencies": [
          "lib/utils",
          "components/ui/button",
          "button.styles.module.scss",
          "types"
        ],
        "usedBy": [
          "button_defaults-atomic-atomic-button-types-ts"
        ],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-16T05:39:26.266Z",
        "size": 6570,
        "exports": [
          "ButtonAtomic"
        ],
        "props": [],
        "variants": [
          {
            "name": "Primary",
            "props": {
              "variant": "primary"
            }
          }
        ]
      },
      "stateMachine": {
        "componentName": "ButtonAtomic",
        "initialState": "loading",
        "states": [
          {
            "name": "loading",
            "description": "Component is in loading state",
            "triggers": [
              "async action started"
            ],
            "transitions": [],
            "cssClasses": [
              "animate-pulse",
              "opacity-50",
              "cursor-not-allowed"
            ],
            "props": {
              "loading": true
            }
          },
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# ButtonAtomic State Machine\n\n## Overview\nInternetFriends Atomic Button Component\n\n## Component States\n\n### Logical States\n\n#### loading\n- **Description**: Component is in loading state\n- **Triggers**: async action started\n- **CSS Classes**: `animate-pulse opacity-50 cursor-not-allowed`\n- **Props**: `{\"loading\":true}`\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<ButtonAtomic />\n\n// Loading state\n<ButtonAtomic loading />\n\n// Error state\n<ButtonAtomic error=\"Something went wrong\" />\n\n// Success state\n<ButtonAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('ButtonAtomic States', () => {\n  it('renders default state', () => {\n    render(<ButtonAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<ButtonAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<ButtonAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>ButtonAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>InternetFriends Atomic Button Component</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>loading</h4>\n<ul>\n<li><strong>Description</strong>: Component is in loading state</li>\n<li><strong>Triggers</strong>: async action started</li>\n<li><strong>CSS Classes</strong>: <code>animate-pulse opacity-50 cursor-not-allowed</code></li>\n<li><strong>Props</strong>: <code>{\"loading\":true}</code></li>\n</ul>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;ButtonAtomic />\n\n// Loading state\n&#x3C;ButtonAtomic loading />\n\n// Error state\n&#x3C;ButtonAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;ButtonAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('ButtonAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;ButtonAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;ButtonAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;ButtonAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.118Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 9,
        "fileSize": 6570
      }
    },
    {
      "id": "button_defaults-atomic-atomic-button-types-ts",
      "metadata": {
        "id": "button_defaults-atomic-atomic-button-types-ts",
        "name": "BUTTON_DEFAULTS",
        "category": "atomic",
        "path": "atomic/button/types.ts",
        "filePath": "components/atomic/button/types.ts",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "InternetFriends Button Component Types",
        "dependencies": [
          "button.atomic",
          "../../styles/tokens/accent.types"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.892Z",
        "size": 7566,
        "exports": [
          "ButtonAtomicProps",
          "ButtonVariant",
          "ButtonSize",
          "ButtonState",
          "ButtonTheme",
          "ButtonA11yProps",
          "ButtonAtomicA11yProps",
          "ButtonGroupProps",
          "ButtonFormConfig",
          "ButtonAtomicCompleteProps",
          "ButtonEventHandlers",
          "ButtonRenderProps",
          "ButtonRenderProp",
          "isButtonVariant",
          "isButtonSize",
          "BUTTON_DEFAULTS"
        ],
        "props": [
          {
            "name": "tabIndex",
            "type": "number",
            "required": false
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "orientation",
            "type": "\"horizontal\" | \"vertical\"",
            "required": false
          },
          {
            "name": "attached",
            "type": "boolean",
            "required": false
          },
          {
            "name": "size",
            "type": "ButtonSize",
            "required": false
          },
          {
            "name": "variant",
            "type": "ButtonVariant",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ],
        "variants": [
          {
            "name": "Primary",
            "props": {
              "variant": "primary"
            }
          }
        ]
      },
      "stateMachine": {
        "componentName": "BUTTON_DEFAULTS",
        "initialState": "loading",
        "states": [
          {
            "name": "loading",
            "description": "Component is in loading state",
            "triggers": [
              "async action started"
            ],
            "transitions": [],
            "cssClasses": [
              "animate-pulse",
              "opacity-50",
              "cursor-not-allowed"
            ],
            "props": {
              "loading": true
            }
          },
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# BUTTON_DEFAULTS State Machine\n\n## Overview\nInternetFriends Button Component Types\n\n## Component States\n\n### Logical States\n\n#### loading\n- **Description**: Component is in loading state\n- **Triggers**: async action started\n- **CSS Classes**: `animate-pulse opacity-50 cursor-not-allowed`\n- **Props**: `{\"loading\":true}`\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<BUTTON_DEFAULTS />\n\n// Loading state\n<BUTTON_DEFAULTS loading />\n\n// Error state\n<BUTTON_DEFAULTS error=\"Something went wrong\" />\n\n// Success state\n<BUTTON_DEFAULTS success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('BUTTON_DEFAULTS States', () => {\n  it('renders default state', () => {\n    render(<BUTTON_DEFAULTS />);\n  });\n  \n  it('renders loading state', () => {\n    render(<BUTTON_DEFAULTS loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<BUTTON_DEFAULTS error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>BUTTON_DEFAULTS State Machine</h1>\n<h2>Overview</h2>\n<p>InternetFriends Button Component Types</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>loading</h4>\n<ul>\n<li><strong>Description</strong>: Component is in loading state</li>\n<li><strong>Triggers</strong>: async action started</li>\n<li><strong>CSS Classes</strong>: <code>animate-pulse opacity-50 cursor-not-allowed</code></li>\n<li><strong>Props</strong>: <code>{\"loading\":true}</code></li>\n</ul>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    loading : Component is in loading state\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;BUTTON_DEFAULTS />\n\n// Loading state\n&#x3C;BUTTON_DEFAULTS loading />\n\n// Error state\n&#x3C;BUTTON_DEFAULTS error=\"Something went wrong\" />\n\n// Success state\n&#x3C;BUTTON_DEFAULTS success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('BUTTON_DEFAULTS States', () => {\n  it('renders default state', () => {\n    render(&#x3C;BUTTON_DEFAULTS />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;BUTTON_DEFAULTS loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;BUTTON_DEFAULTS error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.123Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 5,
        "fileSize": 7566
      }
    },
    {
      "id": "types-atomic-atomic-header-types-ts",
      "metadata": {
        "id": "types-atomic-atomic-header-types-ts",
        "name": "Types",
        "category": "atomic",
        "path": "atomic/header/types.ts",
        "filePath": "components/atomic/header/types.ts",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Component description not available",
        "dependencies": [],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.922Z",
        "size": 2354,
        "exports": [
          "HeaderAtomicProps",
          "HeaderNavigationProps",
          "NavigationItem",
          "HeaderLogoProps",
          "HeaderActionsProps",
          "ThemeToggleProps"
        ],
        "props": [
          {
            "name": "items",
            "type": "NavigationItem[]",
            "required": true
          },
          {
            "name": "activeItem",
            "type": "string",
            "required": false
          },
          {
            "name": "showMobileToggle",
            "type": "boolean",
            "required": false
          },
          {
            "name": "onItemClick",
            "type": "(item: NavigationItem) => void",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "src",
            "type": "string",
            "required": false
          },
          {
            "name": "alt",
            "type": "string",
            "required": false
          },
          {
            "name": "width",
            "type": "number",
            "required": false
          },
          {
            "name": "height",
            "type": "number",
            "required": false
          },
          {
            "name": "onClick",
            "type": "() => void",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "text",
            "type": "string",
            "required": false
          },
          {
            "name": "children",
            "type": "ReactNode",
            "required": true
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "theme",
            "type": "\"light\" | \"dark\" | \"system\"",
            "required": false
          },
          {
            "name": "onThemeChange",
            "type": "(theme: \"light\" | \"dark\" | \"system\") => void",
            "required": false
          },
          {
            "name": "size",
            "type": "\"sm\" | \"md\" | \"lg\"",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "Types",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# Types State Machine\n\n## Overview\nComponent description not available\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<Types />\n\n// Loading state\n<Types loading />\n\n// Error state\n<Types error=\"Something went wrong\" />\n\n// Success state\n<Types success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(<Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(<Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<Types error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>Types State Machine</h1>\n<h2>Overview</h2>\n<p>Component description not available</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;Types />\n\n// Loading state\n&#x3C;Types loading />\n\n// Error state\n&#x3C;Types error=\"Something went wrong\" />\n\n// Success state\n&#x3C;Types success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('Types States', () => {\n  it('renders default state', () => {\n    render(&#x3C;Types />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;Types loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;Types error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.134Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 1,
        "renderTime": 10,
        "fileSize": 2354
      }
    },
    {
      "id": "headeratomic-atomic-atomic-header-header-atomic-tsx",
      "metadata": {
        "id": "headeratomic-atomic-atomic-header-header-atomic-tsx",
        "name": "HeaderAtomic",
        "category": "atomic",
        "path": "atomic/header/header.atomic.tsx",
        "filePath": "components/atomic/header/header.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Simplified HeaderAtomic",
        "dependencies": [
          "lib/utils",
          "types",
          "hooks/use-theme"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T05:53:43.865Z",
        "size": 2041,
        "exports": [
          "HeaderAtomic"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "HeaderAtomic",
        "initialState": "isScrolledFalse",
        "states": [
          {
            "name": "isScrolledFalse",
            "description": "isScrolled is false",
            "triggers": [
              "setIsScrolled(false)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isScrolled": false
            }
          },
          {
            "name": "isScrolledTrue",
            "description": "isScrolled is true",
            "triggers": [
              "setIsScrolled(true)"
            ],
            "transitions": [],
            "cssClasses": [],
            "props": {
              "isScrolled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    isScrolledFalse : isScrolled is false\n    isScrolledTrue : isScrolled is true\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# HeaderAtomic State Machine\n\n## Overview\nSimplified HeaderAtomic\n\n## Component States\n\n### Logical States\n\n#### isScrolledFalse\n- **Description**: isScrolled is false\n- **Triggers**: setIsScrolled(false)\n- **CSS Classes**: ``\n- **Props**: `{\"isScrolled\":false}`\n\n#### isScrolledTrue\n- **Description**: isScrolled is true\n- **Triggers**: setIsScrolled(true)\n- **CSS Classes**: ``\n- **Props**: `{\"isScrolled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    isScrolledFalse : isScrolled is false\n    isScrolledTrue : isScrolled is true\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<HeaderAtomic />\n\n// Loading state\n<HeaderAtomic loading />\n\n// Error state\n<HeaderAtomic error=\"Something went wrong\" />\n\n// Success state\n<HeaderAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('HeaderAtomic States', () => {\n  it('renders default state', () => {\n    render(<HeaderAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<HeaderAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<HeaderAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>HeaderAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>Simplified HeaderAtomic</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>isScrolledFalse</h4>\n<ul>\n<li><strong>Description</strong>: isScrolled is false</li>\n<li><strong>Triggers</strong>: setIsScrolled(false)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isScrolled\":false}</code></li>\n</ul>\n<h4>isScrolledTrue</h4>\n<ul>\n<li><strong>Description</strong>: isScrolled is true</li>\n<li><strong>Triggers</strong>: setIsScrolled(true)</li>\n<li><strong>CSS Classes</strong>: ``</li>\n<li><strong>Props</strong>: <code>{\"isScrolled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    isScrolledFalse : isScrolled is false\n    isScrolledTrue : isScrolled is true\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;HeaderAtomic />\n\n// Loading state\n&#x3C;HeaderAtomic loading />\n\n// Error state\n&#x3C;HeaderAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;HeaderAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('HeaderAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;HeaderAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;HeaderAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;HeaderAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.141Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 7,
        "fileSize": 2041
      }
    },
    {
      "id": "glass_strength_presets-atomic-atomic-glass-refined-types-ts",
      "metadata": {
        "id": "glass_strength_presets-atomic-atomic-glass-refined-types-ts",
        "name": "GLASS_STRENGTH_PRESETS",
        "category": "atomic",
        "path": "atomic/glass-refined/types.ts",
        "filePath": "components/atomic/glass-refined/types.ts",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Types for GlassRefined atomic component",
        "dependencies": [],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T04:13:18.882Z",
        "size": 4001,
        "exports": [
          "GlassStrength",
          "GlassMode",
          "GlassVariant",
          "GlassSize",
          "GlassModeConfig",
          "GlassVariantConfig",
          "GlassComputedProperties",
          "GlassConfig",
          "GlassRefinedProps",
          "GlassRefinedAtomicProps",
          "GLASS_STRENGTH_PRESETS",
          "GLASS_MODE_CONFIGS",
          "GLASS_VARIANT_CONFIGS",
          "ValidGlassStrength",
          "GlassCSSProperties",
          "ThemeGlassProperties",
          "GLASS_THEME_PROPERTIES",
          "EpicGlassContext",
          "GlassRefinedWithEpicProps"
        ],
        "props": []
      },
      "stateMachine": {
        "componentName": "GLASS_STRENGTH_PRESETS",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# GLASS_STRENGTH_PRESETS State Machine\n\n## Overview\nTypes for GlassRefined atomic component\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<GLASS_STRENGTH_PRESETS />\n\n// Loading state\n<GLASS_STRENGTH_PRESETS loading />\n\n// Error state\n<GLASS_STRENGTH_PRESETS error=\"Something went wrong\" />\n\n// Success state\n<GLASS_STRENGTH_PRESETS success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('GLASS_STRENGTH_PRESETS States', () => {\n  it('renders default state', () => {\n    render(<GLASS_STRENGTH_PRESETS />);\n  });\n  \n  it('renders loading state', () => {\n    render(<GLASS_STRENGTH_PRESETS loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<GLASS_STRENGTH_PRESETS error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>GLASS_STRENGTH_PRESETS State Machine</h1>\n<h2>Overview</h2>\n<p>Types for GlassRefined atomic component</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;GLASS_STRENGTH_PRESETS />\n\n// Loading state\n&#x3C;GLASS_STRENGTH_PRESETS loading />\n\n// Error state\n&#x3C;GLASS_STRENGTH_PRESETS error=\"Something went wrong\" />\n\n// Success state\n&#x3C;GLASS_STRENGTH_PRESETS success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('GLASS_STRENGTH_PRESETS States', () => {\n  it('renders default state', () => {\n    render(&#x3C;GLASS_STRENGTH_PRESETS />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;GLASS_STRENGTH_PRESETS loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;GLASS_STRENGTH_PRESETS error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.151Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 10,
        "fileSize": 4001
      }
    },
    {
      "id": "glassrefinedatomic-atomic-atomic-glass-refined-glass-refined-atomic-tsx",
      "metadata": {
        "id": "glassrefinedatomic-atomic-atomic-glass-refined-glass-refined-atomic-tsx",
        "name": "GlassRefinedAtomic",
        "category": "atomic",
        "path": "atomic/glass-refined/glass-refined.atomic.tsx",
        "filePath": "components/atomic/glass-refined/glass-refined.atomic.tsx",
        "testStatus": "unknown",
        "usageCount": 0,
        "description": "Mode to strength mapping",
        "dependencies": [
          "lib/utils",
          "hooks/use-client-side"
        ],
        "usedBy": [],
        "hasTypes": true,
        "hasTests": false,
        "hasStories": false,
        "lastModified": "2025-08-13T05:15:58.637Z",
        "size": 11220,
        "exports": [
          "GlassRefinedAtomicProps",
          "GlassRefinedAtomic"
        ],
        "props": [
          {
            "name": "children",
            "type": "React.ReactNode",
            "required": false
          },
          {
            "name": "className",
            "type": "string",
            "required": false
          },
          {
            "name": "default",
            "type": "0.45) */",
            "required": true
          },
          {
            "name": "strength",
            "type": "number",
            "required": false
          },
          {
            "name": "mode",
            "type": "\"ambient\" | \"focus\" | \"narrative\" | \"performance\" | \"immersive\"",
            "required": false
          },
          {
            "name": "noise",
            "type": "boolean",
            "required": false
          },
          {
            "name": "variant",
            "type": "\"default\" | \"header\" | \"modal\" | \"overlay\" | \"card\"",
            "required": false
          },
          {
            "name": "size",
            "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
            "required": false
          },
          {
            "name": "hover",
            "type": "boolean",
            "required": false
          },
          {
            "name": "padding",
            "type": "boolean",
            "required": false
          },
          {
            "name": "bordered",
            "type": "boolean",
            "required": false
          },
          {
            "name": "disabled",
            "type": "boolean",
            "required": false
          },
          {
            "name": "as",
            "type": "React.ElementType",
            "required": false
          }
        ]
      },
      "stateMachine": {
        "componentName": "GlassRefinedAtomic",
        "initialState": "disabled",
        "states": [
          {
            "name": "disabled",
            "description": "Component is disabled",
            "triggers": [
              "disabled prop true"
            ],
            "transitions": [],
            "cssClasses": [
              "opacity-50",
              "cursor-not-allowed",
              "pointer-events-none"
            ],
            "props": {
              "disabled": true
            }
          }
        ],
        "transitions": [],
        "cssStates": [
          {
            "state": "default",
            "styles": {
              "borderColor": "var(--color-border)",
              "backgroundColor": "var(--color-background)",
              "color": "var(--color-text-primary)"
            },
            "classes": [
              "border",
              "rounded-lg",
              "px-4",
              "py-2"
            ],
            "pseudoStates": [
              ":hover",
              ":focus",
              ":active"
            ]
          },
          {
            "state": "hover",
            "styles": {
              "backgroundColor": "var(--color-background-hover)",
              "borderColor": "var(--color-border-hover)",
              "transform": "translateY(-1px)"
            },
            "classes": [
              "hover:bg-gray-50",
              "hover:border-gray-300"
            ],
            "pseudoStates": [
              ":hover"
            ]
          },
          {
            "state": "focus",
            "styles": {
              "borderColor": "var(--color-primary)",
              "borderWidth": "2px"
            },
            "classes": [
              "focus:border-dashed",
              "focus:border-2",
              "focus:border-blue-500"
            ],
            "pseudoStates": [
              ":focus",
              ":focus-visible"
            ]
          }
        ],
        "mermaidDiagram": "stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset",
        "documentation": "# GlassRefinedAtomic State Machine\n\n## Overview\nMode to strength mapping\n\n## Component States\n\n### Logical States\n\n#### disabled\n- **Description**: Component is disabled\n- **Triggers**: disabled prop true\n- **CSS Classes**: `opacity-50 cursor-not-allowed pointer-events-none`\n- **Props**: `{\"disabled\":true}`\n\n\n### CSS States & Styling\n\n\n#### default\n```css\nborderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n```\n\n**Classes**: `border rounded-lg px-4 py-2`  \n**Pseudo-states**: :hover, :focus, :active\n\n#### hover\n```css\nbackgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n```\n\n**Classes**: `hover:bg-gray-50 hover:border-gray-300`  \n**Pseudo-states**: :hover\n\n#### focus\n```css\nborderColor: var(--color-primary);\nborderWidth: 2px;\n```\n\n**Classes**: `focus:border-dashed focus:border-2 focus:border-blue-500`  \n**Pseudo-states**: :focus, :focus-visible\n\n\n## State Transitions\n\n```mermaid\nstateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n```\n\n## CSS Custom Properties\n\nFollowing InternetFriends design system:\n\n```css\n:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n```\n\n## Focus States\n\nInternetFriends style focus states use **2px dashed borders**:\n\n```css\n.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n```\n\n## Animation Transitions\n\n```css\n.component {\n  transition: all 0.2s ease-in-out;\n}\n```\n\n## Usage Examples\n\n```tsx\n// Default state\n<GlassRefinedAtomic />\n\n// Loading state\n<GlassRefinedAtomic loading />\n\n// Error state\n<GlassRefinedAtomic error=\"Something went wrong\" />\n\n// Success state\n<GlassRefinedAtomic success />\n```\n\n## Testing States\n\n```tsx\n// Test all states\ndescribe('GlassRefinedAtomic States', () => {\n  it('renders default state', () => {\n    render(<GlassRefinedAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(<GlassRefinedAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(<GlassRefinedAtomic error=\"Test error\" />);\n  });\n});\n```\n"
      },
      "renderedMarkdown": "<h1>GlassRefinedAtomic State Machine</h1>\n<h2>Overview</h2>\n<p>Mode to strength mapping</p>\n<h2>Component States</h2>\n<h3>Logical States</h3>\n<h4>disabled</h4>\n<ul>\n<li><strong>Description</strong>: Component is disabled</li>\n<li><strong>Triggers</strong>: disabled prop true</li>\n<li><strong>CSS Classes</strong>: <code>opacity-50 cursor-not-allowed pointer-events-none</code></li>\n<li><strong>Props</strong>: <code>{\"disabled\":true}</code></li>\n</ul>\n<h3>CSS States &#x26; Styling</h3>\n<h4>default</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-border);\nbackgroundColor: var(--color-background);\ncolor: var(--color-text-primary);\n</code></pre>\n<p><strong>Classes</strong>: <code>border rounded-lg px-4 py-2</code><br>\n<strong>Pseudo-states</strong>: :hover, :focus, :active</p>\n<h4>hover</h4>\n<pre><code class=\"language-css\">backgroundColor: var(--color-background-hover);\nborderColor: var(--color-border-hover);\ntransform: translateY(-1px);\n</code></pre>\n<p><strong>Classes</strong>: <code>hover:bg-gray-50 hover:border-gray-300</code><br>\n<strong>Pseudo-states</strong>: :hover</p>\n<h4>focus</h4>\n<pre><code class=\"language-css\">borderColor: var(--color-primary);\nborderWidth: 2px;\n</code></pre>\n<p><strong>Classes</strong>: <code>focus:border-dashed focus:border-2 focus:border-blue-500</code><br>\n<strong>Pseudo-states</strong>: :focus, :focus-visible</p>\n<h2>State Transitions</h2>\n<pre><code class=\"language-mermaid\">stateDiagram-v2\n    disabled : Component is disabled\n    [*] --> default\n    default --> hover : mouse enter\n    hover --> default : mouse leave\n    default --> focus : tab/click\n    focus --> default : blur\n    default --> loading : async action\n    loading --> default : action complete\n    default --> error : error occurred\n    error --> default : reset\n</code></pre>\n<h2>CSS Custom Properties</h2>\n<p>Following InternetFriends design system:</p>\n<pre><code class=\"language-css\">:root {\n  --color-primary: #3b82f6;\n  --color-border: #e5e7eb;\n  --color-border-hover: #d1d5db;\n  --color-background: #ffffff;\n  --color-background-hover: #f9fafb;\n  --color-text-primary: #111827;\n}\n</code></pre>\n<h2>Focus States</h2>\n<p>InternetFriends style focus states use <strong>2px dashed borders</strong>:</p>\n<pre><code class=\"language-css\">.component:focus-visible {\n  border: 2px dashed var(--color-primary);\n  outline: none;\n}\n</code></pre>\n<h2>Animation Transitions</h2>\n<pre><code class=\"language-css\">.component {\n  transition: all 0.2s ease-in-out;\n}\n</code></pre>\n<h2>Usage Examples</h2>\n<pre><code class=\"language-tsx\">// Default state\n&#x3C;GlassRefinedAtomic />\n\n// Loading state\n&#x3C;GlassRefinedAtomic loading />\n\n// Error state\n&#x3C;GlassRefinedAtomic error=\"Something went wrong\" />\n\n// Success state\n&#x3C;GlassRefinedAtomic success />\n</code></pre>\n<h2>Testing States</h2>\n<pre><code class=\"language-tsx\">// Test all states\ndescribe('GlassRefinedAtomic States', () => {\n  it('renders default state', () => {\n    render(&#x3C;GlassRefinedAtomic />);\n  });\n  \n  it('renders loading state', () => {\n    render(&#x3C;GlassRefinedAtomic loading />);\n  });\n  \n  it('handles error state', () => {\n    render(&#x3C;GlassRefinedAtomic error=\"Test error\" />);\n  });\n});\n</code></pre>\n",
      "generatedAt": "2025-08-16T06:53:07.156Z",
      "version": "1.0.0",
      "performance": {
        "analysisTime": 0,
        "renderTime": 5,
        "fileSize": 11220
      }
    }
  ],
  "lastGenerated": "2025-08-16T06:53:07.157Z",
  "totalComponents": 21,
  "metadata": {
    "version": "1.0.0",
    "environment": "development",
    "buildHash": "1fb6e7e2"
  }
}