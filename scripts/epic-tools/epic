#!/bin/bash

# Epic Manager CLI Wrapper
# InternetFriends Portfolio - Epic-based Git Strategy

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Get script directory and project root
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/../.." && pwd )"

# Check if we're in the right directory
if [ ! -f "$PROJECT_ROOT/package.json" ]; then
    echo -e "${RED}‚ùå Error: Not in InternetFriends project root${NC}"
    exit 1
fi

# Check if bun is available
if ! command -v bun &> /dev/null; then
    echo -e "${RED}‚ùå Error: Bun is not installed. Please install bun first.${NC}"
    exit 1
fi

# Change to project root
cd "$PROJECT_ROOT"

# Banner function
show_banner() {
    echo -e "${PURPLE}"
    echo "üé≠ Epic Manager - InternetFriends Portfolio"
    echo -e "${CYAN}Visual Git Strategy for Development Milestones${NC}"
    echo ""
}

# Help function
show_help() {
    show_banner
    echo -e "${YELLOW}Usage:${NC}"
    echo "  epic start <name> [options]           Start a new epic"
    echo "  epic feature add <epic> <feature>     Add feature to epic"
    echo "  epic feature done <epic> <feature>    Complete feature in epic"
    echo "  epic complete <name> [options]        Complete an epic"
    echo "  epic dashboard                        Show epic status"
    echo "  epic graph [limit]                    Show git graph"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  epic start database-manager-v1 --timeline=\"3 weeks\" --goal=\"Connection pooling\""
    echo "  epic feature add database-manager-v1 connection-pool"
    echo "  epic feature done database-manager-v1 connection-pool \"Added PostgreSQL pooling\""
    echo "  epic complete database-manager-v1 --version=\"v1.2.0\" --impact-performance=\"+40%\""
    echo "  epic dashboard"
    echo "  epic graph 30"
    echo ""
    echo -e "${BLUE}Quick Commands:${NC}"
    echo "  epic ls                              List all epics (alias for dashboard)"
    echo "  epic status                          Show detailed epic status"
    echo "  epic log                             Show epic git history"
    echo ""
}

# Quick status function
quick_status() {
    echo -e "${GREEN}üìä Quick Epic Status${NC}"
    echo ""

    # Check for active epic branches
    ACTIVE_EPICS=$(git branch -a | grep "epic/" | head -5)
    if [ -n "$ACTIVE_EPICS" ]; then
        echo -e "${YELLOW}Active Epic Branches:${NC}"
        echo "$ACTIVE_EPICS" | sed 's/^/  /'
        echo ""
    fi

    # Show current branch
    CURRENT_BRANCH=$(git branch --show-current)
    echo -e "${BLUE}Current Branch:${NC} $CURRENT_BRANCH"

    # Show last few epic-related commits
    echo -e "${BLUE}Recent Epic Activity:${NC}"
    git log --oneline --grep="epic:" -5 | sed 's/^/  /'
}

# Main command processing
case "${1:-help}" in
    "start")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Error: Epic name required${NC}"
            echo "Usage: epic start <epic-name>"
            exit 1
        fi

        show_banner
        echo -e "${GREEN}üé≠ Starting epic: $2${NC}"
        bun "$SCRIPT_DIR/epic-manager-v2.ts" start "${@:2}"
        ;;

    "feature")
        if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
            echo -e "${RED}‚ùå Error: Missing arguments${NC}"
            echo "Usage: epic feature <add|done> <epic-name> <feature-name>"
            exit 1
        fi

        show_banner
        if [ "$2" = "add" ]; then
            echo -e "${GREEN}üöÄ Adding feature '$4' to epic '$3'${NC}"
        elif [ "$2" = "done" ] || [ "$2" = "complete" ]; then
            echo -e "${GREEN}‚úÖ Completing feature '$4' in epic '$3'${NC}"
        fi
        bun "$SCRIPT_DIR/epic-manager-v2.ts" feature "${@:2}"
        ;;

    "complete"|"finish"|"done")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå Error: Epic name required${NC}"
            echo "Usage: epic complete <epic-name>"
            exit 1
        fi

        show_banner
        echo -e "${GREEN}üéØ Completing epic: $2${NC}"
        bun "$SCRIPT_DIR/epic-manager-v2.ts" complete "${@:2}"
        ;;

    "dashboard"|"status"|"ls")
        show_banner
        bun "$SCRIPT_DIR/epic-manager-v2.ts" dashboard
        ;;

    "graph"|"log"|"history")
        LIMIT=${2:-20}
        show_banner
        echo -e "${YELLOW}üìä Epic Git Graph (last $LIMIT commits)${NC}"
        echo ""
        bun "$SCRIPT_DIR/epic-manager-v2.ts" graph "$LIMIT"
        ;;

    "quick"|"q")
        quick_status
        ;;

    "help"|"--help"|"-h"|"")
        show_help
        ;;

    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
